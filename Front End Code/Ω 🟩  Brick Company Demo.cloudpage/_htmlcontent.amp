<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <style>
      <style class="main_style">
      .layout-canvas-a {
        background-color: #fff;
        border: none;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        padding: 0;
        width: 100%;
      }
      .layout-canvas-a > .header,
      .layout-canvas-a > .section,
      .layout-canvas-a > .footer {
        position: relative;
        overflow: hidden;
        width: 100%;
        word-wrap: break-word;
      }
      .layout-canvas-a > .section {
        margin: 10px 0;
      }
      .layout-canvas-a > .section > .columns {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        word-wrap: break-word;
      }
      body {
        font-family: 'Roboto', sans-serif;
        color: #000;
        margin: 0 auto;
        max-width: 1280px;
      }
      .header {
        background-color: #0057a6;
        padding: 20px;
        width: 100%;
      }
      .header h2 {
        color: #ffffff;
        font-size: 20px;
        font-weight: 500;
        margin: 0;
      }
      .header button {
        background-color: #ffcf00;
        border: none;
        border-radius: 4px;
        color: #000;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        padding: 10px 20px;
      }
      .header button:hover {
        background-color: #ffd600;
      }
      .section {
        margin-top: 80px;
        padding: 40px;
      }
      .footer {
        background-color: #333333;
        color: #ffffff;
        padding: 20px;
      }
      .connected-button {
        background-color: #28a745 !important;
      }
      .item {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px;
        display: inline-block;
        text-align: center;
      }
      .item img {
        width: 100px;
        height: 100px;
      }
      .benefits {
        margin-top: 50px;
      }
      .hidden {
        display: none;
      }
      @media only screen and (max-width: 480px) {
        .mobile-hidden {
          display: none !important;
        }
        .responsive-td {
          width: 100% !important;
          display: block !important;
          padding: 0 !important;
        }
      }
      .layout-canvas-a > .section > .columns {
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div class="layout layout-canvas-a">
      <div class="header">
        <div data-type="slot" data-key="header">
        </div>
      </div>
      <div class="section">
        <div class="columns col1">
          <div data-type="slot" data-key="col1">
          </div>
        </div>
      </div>
      <div class="footer">
        <div data-type="slot" data-key="footer">
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
    <script>
      // You should only attempt to request the user's account in response to user
      // interaction, such as selecting a button.
      // Otherwise, you popup-spam the user like it's 1999.
      // If you fail to retrieve the user's account, you should encourage the user
      // to initiate the attempt.
      const ethereumButton = document.querySelector('.enableEthereumButton');
      const showAccount = document.querySelector('.showAccount');
      // Get the new div elements
      const noWalletDiv = document.getElementById('noWallet');
      const noTokensDiv = document.getElementById('noTokens');
      ethereumButton.addEventListener('click', () => {
        getAccount();
      }
                                     );
      // While awaiting the call to eth_requestAccounts, you should disable
      // any buttons the user can select to initiate the request.
      // MetaMask rejects any additional requests while the first is still
      // pending.
      async function getAccount() {
        const accounts = await window.ethereum.request({
          method: 'eth_requestAccounts' }
                                                      )
        .catch((err) => {
          if (err.code === 4001) {
            // EIP-1193 userRejectedRequest error
            // If this happens, the user rejected the connection request.
            console.log('Please connect to MetaMask.');
          }
          else {
            console.error(err);
          }
        }
              );
        const account = accounts[0];
        showAccount.innerHTML = account;
        // Update the button text and color when the wallet is connected
        if (account) {
          // Wallet is connected!
          noWalletDiv.classList.add('hidden');
          // hide the no wallet div
          ethereumButton.innerHTML = 'Connected';
          ethereumButton.classList.add('connected-button');
        }
        else {
          // Wallet is not connected!
          noWalletDiv.classList.remove('hidden');
          // display the no wallet div
          ethereumButton.innerHTML = 'Connect Wallet';
          ethereumButton.classList.remove('connected-button');
        }
        checkWalletConnection();
      }
      function checkWalletConnection() {
        if(typeof window.ethereum !== 'undefined') {
          window.ethereum.request({
            method: 'eth_accounts' }
                                 )
            .then(accounts => {
            if (accounts.length) {
              // Wallet is connected!
              noWalletDiv.classList.add('hidden'); // hide the no wallet div
              showAccount.innerHTML = accounts[0];
              ethereumButton.innerHTML = 'Connected';
              ethereumButton.classList.add('connected-button');
              
              var account = accounts[0];
              var walletUrl = 'https://mczx7pkw3-f039yf041wprzg3lj4.pub.sfmc-content.com/jtxd5ii51f5' + '?wallet=' + account;

              
              // fetch wallet contents that match our bricks
              fetch(walletUrl)
                .then(response => response.json())
                .then(data => {
                console.log(data);
                if (data.message.length > 0) {
                  // User has BRICK tokens!
                  noTokensDiv.classList.add('hidden');

                  // Select the results div
                  var resultsDiv = document.getElementById('results');
                  // Start building HTML results
                  var html = '<div class="container"><h2>Your wallet contains the following tokens:</h2><div class="row">';
                  // Loop through each item in the message array
                  data.message.forEach(item => {
                    html += `
<div class="col-md-3">
<div class="card" style="width: 18rem;">
<img class="card-img-top" src="${item.imageUrl}
" alt="Card image cap">
<div class="card-body">
<h5 class="card-title">Token: ${item.tokenId}
      </h5>
      </div>
      </div>
      </div>
`;
                  }
                                      );
                  html += '</div>';
                  // Add benefits text and list
                  html += `<div class="benefits"><h2>Here are your benefits:</h2>
<ul>
<li>Exclusive early access to new BRICK sets</li>
<li>Membership to BRICK collectors club</li>
<li>Invitations to special BRICK events and conventions</li>
<li>Opportunities to vote on future BRICK set designs</li>
<li>Discounts at BRICK stores and online</li>
      </ul>
      </div>`;
                  // Finally, update the results div with our HTML
                  resultsDiv.innerHTML = html;
                }
                else {
                  // User doesn't have BRICK tokens!
                  noTokensDiv.classList.remove('hidden');

                }
              }
                     )
                .catch((error) => {
                console.error('Error:', error);
              }
                      );
            }
            else {
              showAccount.innerHTML = 'Not connected';
              ethereumButton.innerHTML = 'Connect Wallet';
              ethereumButton.classList.remove('connected-button');
            }
          }
                 )
            .catch(err => console.error(err));
        }
        else {
          showAccount.innerHTML = 'No Ethereum provier detected';
        }
      }
      // Call the checkWalletConnection function WHEN THE PAGE LOADS
      window.addEventListener('load', () => {
        checkWalletConnection();
      }
                             );
    </script>
  </body>
</html>
